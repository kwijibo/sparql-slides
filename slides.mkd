!SLIDE

#A Day of SPARQL 

##  Keith Alexander
### keith.alexander@talis.com

!SLIDE
#Useful Materials

* These slides: http://kwijibo.talis.com/training/SPARQL :  [source on github](https://github.com/kwijibo/sparql-slides)
* [NASA data endpoint](http://api.talis.com/stores/space/services/sparql)
* [NASA data endpoint that returns HTML](http://myadmin.kwijibo.talis.com/space/services/sparql)
* [training-exercises endpoint](http://myadmin.kwijibo.talis.com/training-exercises/services/sparql)
* [prefix.cc](http://prefix.cc)
* [bookmarklet for adding missing prefixes to query](http://kwijibo.talis.com/bookmarklets.html#addPrefix2Sparql)

!SLIDE

#**S**PARQL  **P**rotocol  **A**nd  **R**DF  **Q**uery  **L**anguage

!SLIDE
##Protocol:

How you send the queries and what you get back.

###Client Request



*`GET`* `http://example.info/sparql?query={urlencoded query}`

(or *`POST`* for very long queries)


Use content-negotiation to indicate your preferred format for results


!SLIDE

##Protocol:
### Server Response



`HTTP 200 OK` (if the query was valid)

results can be serialised in various formats: XML, JSON, Turtle, HTML

`HTTP 400 Bad Request` (if query wasn't valid)

!SLIDE

#Query Language

@@@ sparql
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
SELECT ?name ?email
WHERE {
  ?person 
    a foaf:Person ;
    foaf:name ?name ;
    foaf:mbox ?email . 
} 
ORDER BY ?name
LIMIT 10
OFFSET 0
@@@

!SLIDE
#Architecture

![data <= triplestore <= SPARQL Processor <= SPARQL endpoint <= applications/clients ](img/sparql-arch.png)


!SLIDE
#Endpoint

## A SPARQL Endpoint for NASA data
<form method="POST" action="http://api.talis.com/stores/space/services/sparql">
    <textarea rows="10" cols="40" name="query">
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt; 
SELECT ?craft 
WHERE {
    ?craft a space:Spacecraft .
}        
    </textarea>
    <br/>
    <input type="submit" value="Query"/>
</form>


!SLIDE

#####Triple Store Conceptually
![picture of data graph](img/triplestore-data-graph.png)

!SLIDE

# 4 Types of Query

* `ASK` (true or false)
* `SELECT` (table)
* `DESCRIBE` (resource descriptions)
* `CONSTRUCT` (triples)

!SLIDE

# ASK: Uses

* Probing a triple store for predicates and classes you want
* Testing for things in your data that you don't want (mistakes!)
* Authentication (does a user with this email and password hash exist ?)

!SLIDE

##`ASK`: Example
@@@ sparql

PREFIX space: &lt;http://purl.org/net/schemas/space/&gt; 
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
ASK 
WHERE {
    &lt;http://nasa.dataincubator.org/spacecraft/1957-001B&gt;
        foaf:name "Sputnik 1"
         .
}        
@@@

!SLIDE

![diagram of pattern matching against something named sputnik](img/match-name-sputnik.png)

!SLIDE

###`ASK`  Result
@@@ xml
&lt;sparql xmlns=&quot;http://www.w3.org/2005/sparql-results#&quot;&gt; 
        &lt;head/&gt;
        &lt;boolean&gt;true&lt;/boolean&gt;
&lt;/sparql&gt;
@@@


!SLIDE

##`ASK`: Example
@@@ sparql

PREFIX space: &lt;http://purl.org/net/schemas/space/&gt; 
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
ASK 
WHERE {
    ?something
        foaf:name "Sputnik 1"
         .
}        
@@@

!SLIDE

![diagram of pattern matching against something named sputnik](img/match-name-sputnik.png)


!SLIDE

##`ASK`: is there anything with an rdfs:label ?

@@@ sparql

PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
ASK 
WHERE {
  ?something rdfs:label ?label .
}

@@@

!SLIDE

![triplestore diagram matching anything with an rdfs:label pattern](img/ask-rdfs-label.png)




!SLIDE

##`ASK`: Example
@@@ sparql

PREFIX space: &lt;http://purl.org/net/schemas/space/&gt; 
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
ASK 
WHERE {
    ?something a space:Spacecraft ;
        foaf:name "Sputnik 1"
         .
}        
@@@



!SLIDE
##`ASK`: Exercise



[http://bit.ly/nasa-sparql](http://api.talis.com/stores/space/services/sparql)


  
  

Use `ASK` to find if there are any things with:
* an `rdf:type` property `space:Spacecraft`, and 
* a `foaf:depiction` (with any value).




!SLIDE

#SELECT: Uses

`SELECT` returns a table, good for:

*  Getting back simple values in a tabular structure.
*  Using semantic web data with XML tools (don't use XML tools with RDF/XML!)
*  Ordered Results (order is significant in XML, but not in an RDF document).



!SLIDE
##SELECT: Example

@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;

SELECT ?subject ?label 
WHERE {
  ?subject 
    a space:Discipline ;
    rdfs:label ?label 
    .

}
@@@



!SLIDE

##SELECT: Exercise



Use `SELECT` to  get the  URI and `foaf:name` of all `foaf:Person` s.

Don't forget to add the **foaf** prefix:

@@@ sparql
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
@@@


!SLIDE

## Too many results!
## LIMIT
@@@ sparql
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
SELECT ?uri ?name 
WHERE 
{
  ?uri a foaf:Person ;
  foaf:name ?name .
}		
LIMIT 10
@@@

!SLIDE

![table from SELECT query](img/select-people.png)


!SLIDE
## Paging with `OFFSET`

* `LIMIT` is page size
* `OFFSET` is starting point: page size * (page number - 1)

!SLIDE
## `LIMIT` and `OFFSET` Paging Exercise

Imagine you are writing a web page that shows a list of people, 10 per page.


Modify your query from the last exercise to return page 3 of the results.

!SLIDE

# `ORDER BY`
@@@ sparql
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
SELECT ?uri ?name 
WHERE 
{
  ?uri a foaf:Person ;
  foaf:name ?name .
}
ORDER BY ?name		
LIMIT 10
@@@


!SLIDE

## `ORDER BY` 
### Sort Order 

* `?name` *ascending alphabetic order*
* `ASC(` `?name` `)` *ascending alphabetic order*
* `DESC(` `?name` `)` *descending alphabetic order*
* `ASC(` `xsd:decimal(` `?number` `)` `)` *ascending numeric order*
* `?name ?place ?mass`  *inner sorts*

!SLIDE

## `ORDER BY` Exercise:

1. Look at an example spacecraft [http://nasa.dataincubator.org/spacecraft/1988-111A](http://nasa.dataincubator.org/spacecraft/1988-111A)
2. Find the URI for the property that describes **mass**.
3. `SELECT` the ten `space:Spacecraft` with the largest mass, in descending numeric order.

!SLIDE

## Duplicate Results

@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
SELECT   ?country 
WHERE {
  ?launchsite 
      a space:LaunchSite ;
      space:country ?country . 
}
@@@

!SLIDE

## Duplicate Results

![table with duplicate results](img/duplicate-results.png)


!SLIDE

# `DISTINCT`
@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
SELECT  DISTINCT ?country 
WHERE {
  ?launchsite 
      a space:LaunchSite ;
      space:country ?country . 
}
@@@


!SLIDE

##Duplicate results

## `REDUCED`

@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
SELECT  REDUCED ?country 
WHERE {
  ?launchsite 
      a space:LaunchSite ;
      space:country ?country . 
}
@@@

Like `DISTINCT`, but less strict

<cite>Do your best to eliminate duplicates, but don't worry if there are some, just do it as quick as you can</cite>


!SLIDE

##SELECT: Connected Things

@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;

SELECT DISTINCT ?spacecraftName  ?launchdate
WHERE {
  ?spacecraft 
      a space:Spacecraft ;
      foaf:name ?spacecraftName ;
      space:discipline ?discipline . 
  ?discipline 
    a space:Discipline ;
    rdfs:label "Astronomy" .
  ?launch 
    a space:Launch ; 
    space:launched ?launchdate ;
    space:spacecraft ?spacecraft .
}
@@@



!SLIDE

###SELECT: Connected Things Exercise

Write a `SELECT` query that returns the values of:
1. The `foaf:name` of something that is `a space:Spacecraft`, and **is  `space:spacecraft` of**  a `space:Launch` (ie: `?launch space:spacecraft ?craft .`)
2. The launch date (`space:launched`)  of the `space:Launch`
3. The `rdfs:label` of the `space:Launchsite` that is the `space:launchsite` of the Launch. 
4. The `space:country` is <q>Japan</q>.


!SLIDE

###Connected Things: answer
@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
SELECT DISTINCT ?spacecraftName ?launchdate ?launchsiteName 
WHERE {
  ?spacecraft 
      a space:Spacecraft ;
      foaf:name ?spacecraftName ;
      space:discipline ?discipline .       
  ?launch 
      a space:Launch ;
      space:spacecraft ?spacecraft ;
      space:launched ?launchdate ;
      space:launchsite ?launchsite .
  ?launchsite
      rdfs:label ?launchsiteName .
}
ORDER BY ?launchsiteName
LIMIT 10
@@@

!SLIDE

# Data is not uniform!

!SLIDE
### Get images for Spacecraft
@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;

SELECT ?uri ?name ?image 
WHERE 
{
  ?uri a space:Spacecraft ;
      foaf:name ?name ;
      foaf:depiction ?image .
}
@@@

!SLIDE

## Data is not uniform

Look at: 
[http://nasa.dataincubator.org/spacecraft/1988-111A](http://nasa.dataincubator.org/spacecraft/1988-111A)


!SLIDE
# `OPTIONAL`

@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;

SELECT ?uri ?name ?image 
WHERE 
{
  ?uri a space:Spacecraft ;
      foaf:name ?name .
      
      OPTIONAL{
            ?uri foaf:depiction ?image . 
           }
}
@@@


!SLIDE

## Data is not uniform
### Different patterns doing the same thing

@@@ sparql
?s a space:Spacecraft ;
    foaf:name ?label .
@@@
    
    
@@@ sparql
?s a space:Discipline ;
    rdfs:label ?label .
@@@

!SLIDE
# `UNION`
### Binds different patterns to the same variable names

@@@ sparql
SELECT ?s  ?label 
WHERE
{

    {
        ?s a space:Spacecraft ;
        foaf:name ?label .
    } 
    UNION
    { 
        ?s a space:Discipline ;
        rdfs:label ?label . 
    }
}
@@@

!SLIDE 

# Evaluation values with `FILTER`

@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
SELECT ?s 
WHERE 
{
    ?s a space:Spacecraft ;
        space:mass ?mass .
    FILTER(?mass &lt; 100.0)
}

@@@

!SLIDE

### Evaluating values with FILTER

`?mass` is only a plain literal in the triple store

`100.0` is a Decimal

We can cast ?mass to an xsd datatype to compare it to a decimal

@@@ sparql
FILTER( xsd:decimal(?mass) &lt; 100.0)
@@@

!SLIDE
###  'Between' Dates with `FILTER`

@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
PREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;
SELECT ?name WHERE {
  ?launch space:launched ?date ;
          space:spacecraft ?spacecraft .
  ?spacecraft foaf:name ?name .
FILTER (
  ?date &gt;= &quot;1969-01-01&quot;^^xsd:date &amp;&amp; 
  ?date &lt;= &quot;1969-12-31&quot;^^xsd:date
  )
}
@@@

(Here the dates have `xsd:date` datatypes in the triple store)


!SLIDE
### `FILTER`: String matching with `REGEX`
@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;

SELECT ?s ?name 
WHERE {
    ?s a space:Spacecraft ;
        foaf:name ?name .
  FILTER(REGEX(?name, "Apollo", "i"))
}
@@@

!SLIDE
#### Advanced REGEX trick
 
 Store **regular expressions** as *data*, and use them in your queries.
 
@@@ sparql
PREFIX void: &lt;http://rdfs/org/ns/void#&gt;
SELECT ?dataset
WHERE 
{
    ?dataset a void:Dataset ;
        void:uriRegexPattern ?regex .
    FILTER(REGEX("http://nasa.dataincubator.org/spacecraft/1988-111A", ?regex))    
}
@@@

!SLIDE
##### If you described your regexes as RDF you could:

@@@ sparql

SELECT ?uri ?invalidPostcode
WHERE
{
    ?uri ex:postcode ?invalidPostcode .
    regex:UK_Postcode regex:pattern ?postcodeRegex .
    FILTER(!REGEX(?invalidPostcode, ?postcodeRegex)) 
}
@@@

!SLIDE
### `FILTER` accessors

* `str(?o)` - string value of a URI
* `datatype(?o)` - returns the datatype URI of a typed literal
* `lang(?o)` - returns the language tag of a literal


!SLIDE
##More `FILTER`

* boolean logic:
  * AND `&&`
  * OR `||`
  * NOT `!`
  * Equal `=`
  * Not Equal `!=`
* tests:
* `isURI(?o)`
* `isLiteral(?o)`
* `isBlank(?o)`
* `langMatches(lang(?o), "EN")`
* `bound(?o)`


!SLIDE
## Patterns *Without* a sub pattern

The `OPTIONAL FILTER !bound` technique:
@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;

SELECT ?s
WHERE
{
    ?s a space:Spacecraft .
    OPTIONAL {
        ?s foaf:depiction ?img .
    }
    FILTER( !bound(?img) )
}
@@@


!SLIDE

##`FILTER` exercise:

Find URIs that are linked to, but not described.
* What is a pattern for  `?o` where  `?o` is linked to by something?
* How do you test that `?o` is a URI, rather than a Literal or Blank Node?
* What is a pattern for `?o` having a description? (ie, being the *subject* of triples)?
* How do you exclude that pattern?


!SLIDE

# `DESCRIBE`

Returns RDF descriptions of any matching resources

## Uses:

* Getting back complete descriptions of stuff
* Getting back properties you didn't know existed

!SLIDE

##`DESCRIBE`: What is a description?

Not specified by the spec, but something similar to:

@@@ sparql
 &lt;thingToBeDescribed&gt; ?p ?o .
@@@

and if `?o` is a blank node, also:
@@@ sparql
 ?o ?p2 ?o2
@@@

!SLIDE
## DESCRIBE: known URIs

@@@ sparql
DESCRIBE 
&lt;http://nasa.dataincubator.org/spacecraft/1957-001B&gt;
&lt;http://nasa.dataincubator.org/spacecraft/1988-111A&gt;

@@@

Can DESCRIBE one or more known URIs

!SLIDE

## DESCRIBE: pattern matches

@@@ sparql
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;

DESCRIBE ?spacecraft ?launch
WHERE {
  ?spacecraft 
      a space:Spacecraft ;
      space:discipline ?discipline . 
  ?discipline 
    a space:Discipline ;
    rdfs:label "Astronomy" .
  ?launch 
    a space:Launch ; 
    space:launched ?launchdate ;
    space:spacecraft ?spacecraft .
}
@@@

!SLIDE
## DESCRIBE exercise

* Use `DESCRIBE` to get a description of http://nasa.dataincubator.org/person/charlesmossdukejr
* Look at an example MissionRole http://nasa.dataincubator.org/mission/apollo-10/role/capsule-communicator/0
* Write a `DESCRIBE` query to get descriptions of anyone that went on a Mission with *Charles Moss Duke Jr*
* Make sure you exclude *Charles Moss Duke Jr* from the results

!SLIDE

# `CONSTRUCT`
@@@ sparql
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
CONSTRUCT 
{
    ?s rdfs:label ?label ; 
        a ?type . 
}
WHERE
{ 
    ?s rdfs:label ?label ;
        a ?type . 
}
@@@

 Returns specific triples

!SLIDE
### `CONSTRUCT`: Exercise

* Use the [NASA endpoint](http://api.talis.com/stores/space/services/sparql)
* Write a `CONSTRUCT` that returns the `foaf:name`, `rdf:type`, and `foaf:depiction` of any `space:Spacecraft` 
* Restrict the query to only `space:Spacecraft` with "Apollo" in their name.
* Make the `foaf:depiction` optional.

!SLIDE

### `CONSTRUCT` Exercise: extended descriptions

`CONSTRUCT` a description of http://nasa.dataincubator.org/spacecraft/1957-001B which has:

* All the properties and values  of http://nasa.dataincubator.org/spacecraft/1957-001B
* The `rdf:type` and `rdfs:label` of every thing that **Sputnik 1** links to.
* All the triples linking in to http://nasa.dataincubator.org/spacecraft/1957-001B (ie, **Sputnik 1** is in *object* position).
* The `rdf:type` and `rdfs:label` of every thing that links to **Sputnik 1**.

!SLIDE
#### `CONSTRUCT`: extended description answer

@@@ sparql
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
CONSTRUCT 
{
    &lt;http://nasa.dataincubator.org/spacecraft/1957-001B&gt; ?pl ?l ; 
     ?p ?o .
    ?o a ?type ; 
       rdfs:label ?label .
}
WHERE
{ 
    &lt;http://nasa.dataincubator.org/spacecraft/1957-001B&gt; 
                ?pl ?l ; 
                ?p ?o .
    OPTIONAL { ?o a ?type . }
    OPTIONAL { ?o foaf:name ?label . }
    OPTIONAL { ?o rdfs:label ?label . }
}
@@@

!SLIDE
##`CONSTRUCT`ing new Triples

You can remodel the data matched by the query into new triples:

@@@ sparql
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
CONSTRUCT 
{
    ?s rdfs:label ?label ; 
        a ?type . 
}
WHERE
{ 
    ?s foaf:name ?label ;
        a ?type . 
}

@@@



!SLIDE
### `CONSTRUCT`  `FILTER`: Exercise

* Go to http://dbpedia.org/sparql
* Write a `CONSTRUCT` query that returns a description of http://dbpedia.org/resource/Oslo
* Use `lang()` to `FILTER` only the property values that are URIs, plain literals, or literals in English.
* Use `langMatches(lang(?o), "EN")` to match on any variant of English.  


!SLIDE
## `CONSTRUCT`: Uses

* Migrating the data model  (or re`CONSTRUCT`ing it on the fly). eg: dc to dcterms 
* Flattening a data model from a complex one
* Producing a more complex model from a simple one
* Generate a schema from the way terms are used in the data
* Inferring new triples from triples in the store + schema
* Reasoning new triples from triple patterns in the store

!SLIDE
### `CONSTRUCT`: Obscure advanced trick

You don't need to take any values from the `WHERE` clause.

@@@ sparql
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
CONSTRUCT
{
    <http://example.com/Buzz_Aldrin> a foaf:Person ;
        foaf:name "Buzz Aldrin" .
        
} WHERE {}
@@@

!SLIDE

##Gotchas with `CONSTRUCT` and `DESCRIBE`

* `DESCRIBE` underspecified - different triple stores can return different results
* `ORDER BY` may affect the results, but remember, RDF graphs have no explicit order
* `LIMIT` limits number of *solutions* to the graph pattern, not the number of *resources* or  *triples*.
* Can't do "10 Missions and all the pilots who flew on them" - need sub selects (coming in SPARQL 1.1), or 

!SLIDE
# SPARQL Application Pattern 

The way to deal with the 'gotchas' is:

1. Use `SELECT` to generate your ordered list of root resource URIs (eg: 10 missions)
2. Generate a `CONSTRUCT` to query for a description of the URIs you got from the SELECT, retrieving the triples you need for each of the resources. No `ORDER BY` or `LIMIT` should be used in this query.
3. Use the response from the `SELECT` to render the descriptions from the `CONSTRUCT` response in the correct order.

!SLIDE
# Graphs: `FROM`

A **graph** is set of triples.

Triplestores can group triples into graphs and name the graphs.

You can specify which graphs you want to query over:

@@@ sparql
SELECT ?name ?favouriteSpacesuit
FROM &lt;http://example.com/astronauts&gt;
WHERE { ... }
@@@

!SLIDE
## Graphs: `FROM NAMED`

You can be specific about which graph to use for a sub-pattern in your query:

@@@ sparql
SELECT ?name ?favouriteSpacesuit
FROM NAMED &lt;http://example.com/astronauts&gt;
FROM NAMED &lt;http://example.com/spacesuits&gt;
WHERE { 
 GRAPH &lt;http://example.com/astronauts&gt; {
     ?s foaf:name ?name .
 }
 GRAPH &lt;http://example.com/spacesuits&gt; {
     ?s foaf:name ?favouriteSpacesuit .
 }    
     
}
@@@

!SLIDE
## Graphs: Exercise

* Go to http://sparql.org/sparql.html - this endpoint will fetch RDF/XML documents as graphs over the web
* Write a `SELECT` query that returns the URI and `rdfs:label` of every `rdf:Property` **from** http://xmlns.com/foaf/0.1/


!SLIDE

# Performance
## Things that make queries slow:

* variable-heavy graph patterns (`?s ?p ?o`)
* variables that aren't connected in the graph pattern (`?s ?p ?o . ?x ?y ?z` ) - Cross product!
* No `LIMIT` - lots of results to return
* `ORDER BY` - processor has to sort through all the results before applying `LIMIT`
* `DISTINCT` - processor has to sort through all results and eliminate duplicates
* `FILTER` - processor has to evaluate values
* `OPTIONAL` - an OPTIONAL pattern doesn't make the query any more specific


!SLIDE
# Performance

## Tips for Optimising queries

* Be specific (use URIs and Literals instead of variables where you can)
* Put the most restrictive patterns first.
* Use `REDUCED` instead of `DISTINCT` if you can.
* Use `ASK` if you don't need values returned
* Use `LIMIT` and `OFFSET` to page through large results


!SLIDE
## Syntactic Sugar, Obscurities and other Weirdness: 

* `WHERE` isn't required (except with `CONSTRUCT`)
* `SELECT *` returns a table with columns for each variable used (`DESCRIBE *` also works)
* Variables can be notated as `$foo` as well as `?foo`
* **bnodes** are treated as unnamed variables: ` [] a foaf:Person` is the same as `?s a foaf:Person`.
* A *bnode* in a `CONSTRUCT` clause will generate a new *bnode* for every *solution* to the `WHERE` pattern


!SLIDE
#Common Problems

* Typos wrong case for property or class name: `foaf:basedNear` instead of `foaf:based_near`
* wrong prefix URI missing # or / or the URI for the web page of the spec, not the namespace (eg: http://xmlns.com/foaf/spec/ instead of http://xmlns.com/foaf/0.1/)
* Missing OPTIONAL - you won't even notice you're missing results...
* Comparing Literals Literals are compared on all of value, type and language: `"foo"` in the query will not match `"foo"@en`  in the triple store.

!SLIDE
# SPARQL 1.1 Aggregates

*SPARQL 1.1*

* `MAX`     - largest number from all values
* `COUNT`   - number of values
* `SUM`     - total of all values added together
* `MIN`     - lowest number of all values
* `AVG`     - average number from all values


!SLIDE

## `MAX`

@@@ sparql
PREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;

SELECT (MAX(xsd:decimal(?mass)) AS ?max)
WHERE 
{
  ?s a space:Spacecraft ;
      space:mass ?mass .
}
@@@

!SLIDE
## `COUNT`
@@@ sparql
PREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;

SELECT ?personName (COUNT(DISTINCT ?mission) AS ?noOfMissions) 
WHERE
{    
    ?role a space:MissionRole ;
        space:actor ?person ;
        space:mission ?mission .
        
    ?person foaf:name ?personName .
} 
GROUP BY ?personName
ORDER BY DESC(?noOfMissions)
@@@

!SLIDE
## `COUNT` with `HAVING()`
@@@ sparql
PREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;

SELECT ?personName (COUNT(DISTINCT ?mission) AS ?noOfMissions) 
WHERE
{    
    ?role a space:MissionRole ;
        space:actor ?person ;
        space:mission ?mission .
        
    ?person foaf:name ?personName .
}
GROUP BY ?personName
HAVING (?noOfMissions &gt; 3)
ORDER BY DESC(?noOfMissions)
@@@


!SLIDE

### Aggregates: Exercise

1. Find the lowest value of `space:mass` of a `space:Spacecraft`
2. Write a query that returns a table of *disciplines* with their names, and the number of spacecraft that relate to that discipline.
3. Sort the table in descending order of most used discipline, with an inner sort on discipline name. 

!SLIDE
# SPARQL for Analysing your Dataset: Exercise

1. Write a query that returns the number of triples in the dataset
2. Write a query that returns the number of `rdf:type` triples
3. Get a unique list of properties used in the dataset
4. Get a table of class types used, with the number of times they are used.



!SLIDE
# SPARQL for testing your Data for mistakes
eg:

@@@ sparql

PREFIX owl: &lt;http://www.w3.org/2002/07/owl#&gt;
ASK WHERE 
{
 ?s owl:sameAs ?o .
 FILTER(isLiteral(?o))
}
@@@

!SLIDE

## SPARQL testing your data: exercise

* Go to [training-exercises SPARQL endpoint](http://myadmin.kwijibo.talis.com/training-exercises/services/sparql)
* Write an `ASK` query that find if any values of `rdf:type` are literals
* Write an `ASK` query that finds if any predicates use **http://xmlns.com/foaf/spec/** instead of **http://xmlns.com/foaf/0.1/**.
* Write an `ASK` query that checks if any literals with an xsd:date are not in the correct format for that datatype.


!SLIDE 


# SPARQL for generating schema

@@@ sparql
PREFIX void: &lt;http://rdfs.org/ns/void#&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX owl: &lt;http://www.w3.org/2002/07/owl#&gt;
PREFIX space: &lt;http://purl.org/net/schemas/space/&gt;

CONSTRUCT {
?p a owl:ObjectProperty ;
 rdfs:label &quot;REPLACE ME&quot;@en ;
 rdfs:comment &quot;REPLACE ME&quot;@en ;
 rdfs:isDefinedBy space: .

} WHERE {
 &lt;http://nasa.dataincubator.org/&gt; a void:Dataset ;
  void:exampleResource ?ex .
 ?ex  ?p ?o .
 FILTER(isURI(?o))
FILTER(regex(str(?p), str(space:)))
}
@@@

!SLIDE
## SPARQL for generating schema: Exercise

 Expand the query on the previous slide to include:
 
1. A description of the **space** ontology - label, comment, type
2. An `rdfs:domain` for the property
3. An `rdfs:range` for the property


!SLIDE
# SPARQL for improving your data: Exercise

1. Get a unique list of values for the `space:country` of LaunchSites
2. Pick one, and find a URI for it (try http://sindice.com)
3. Write a `CONSTRUCT` query that will create a triple like : `?launchsite dct:isPartOf <countryUri> .` for every occurrence of `?launchsite space:country "country name" .` 

You could then load these triples back into your store.

!SLIDE
# SPARQL for inferencing: Exercise

* `owl:sameAs` means that if `<x>  owl:sameAs <y>`, all the properties of `<y>` also belong to `<x>`
* Find the URI of something in the [training-exercises store](http://api.talis.com/stores/training-exercises/services/sparql) with an `owl:sameAs` property.
* Import RDF describing the URI that your `owl:sameAs` points to using [training exercises importer](http://myadmin.kwijibo.talis.com/training-exercises/Importer) 
* Write a `CONSTRUCT` query that:
  * Returns a simple description of your URI. ie: `<x> ?p ?o `
  * Takes all the properties of `<y>` and add them to the description of `<x>`


!SLIDE

#More Info

* #swig on irc.freenode.net
* http://sparql.org/
* The [current spec](http://www.w3.org/TR/rdf-sparql-query/) http://www.w3.org/TR/rdf-sparql-query/
* The [SPARQL 1.1 Spec](http://www.w3.org/TR/sparql11-query/) http://www.w3.org/TR/sparql11-query/
* [SPARQL Cheatsheet slideshow](http://www.slideshare.net/LeeFeigenbaum/sparql-cheat-sheet) http://www.slideshare.net/LeeFeigenbaum/sparql-cheat-sheet 

## Tools

* [sparql-query UNIX command line tool](https://github.com/tialaramex/sparql-query)
* [SNORQL - AJAX front end for SPARQL endpoints](https://github.com/kurtjx/SNORQL)

!SLIDE

#Thanks

<a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/"><img alt="Creative Commons Licence" style="border-width:0" src="http://i.creativecommons.org/l/by-sa/3.0/88x31.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" property="dct:title" rel="dct:type">A Day of SPARQL</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="http://keithalexander.co.uk/" property="cc:attributionName" rel="cc:attributionURL">Keith Alexander</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.<br />Based on a work at <a xmlns:dct="http://purl.org/dc/terms/" href="http://kwijibo.talis.com/training/SPARQL" rel="dct:source">http://kwijibo.talis.com/training/SPARQL</a>.